// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  class         Int       @default(10)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  notes    Note[]
  tests    Test[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Note {
  id              String   @id @default(cuid())
  title           String
  originalText    String?  @db.Text
  enhancedContent String   @db.Text
  subject         String
  chapter         String
  pdfUrl          String?
  userId          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notes")
}

model Question {
  id          String   @id @default(cuid())
  question    String   @db.Text
  options     String[] // For MCQs
  answer      String   @db.Text
  explanation String   @db.Text
  subject     String
  chapter     String
  difficulty  String   // easy, medium, hard
  type        String   // mcq, short, long
  marks       Int      @default(1)
  createdAt   DateTime @default(now())

  @@map("questions")
}

model Test {
  id          String    @id @default(cuid())
  name        String
  subject     String
  totalMarks  Int
  score       Int?
  timeSpent   Int?      // seconds
  questions   Json      // Array of question IDs and user answers
  userId      String
  createdAt   DateTime  @default(now())
  completedAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tests")
}
